### index.ts ###
// index.ts

/**
 * Main entry point for the Trial Accounts package.
 *
 * This package provides functions to deploy trial contracts,
 * create trials, add trial accounts, activate trial accounts,
 * perform actions, and broadcast transactions.
 *
 * @packageDocumentation
 */

// index.ts

export { setupWalletSelector } from "./lib/setupWalletSelector";
export { setupModal } from "./lib/modal";
export { default as FastAuthProvider } from "./lib/FastAuthProvider";


### lib/FastAuthWallet.ts ###
// FastAuthWallet.ts

import {
    WalletModuleFactory,
    WalletBehaviourFactory,
    Account,
    SignInParams,
    Wallet,
    VerifyOwnerParams,
    VerifiedOwner,
} from "@near-wallet-selector/core";
import { googleLogout } from "@react-oauth/google";
import { KeyPair } from "near-api-js";
import { transactions, utils } from "near-api-js";
import type { FinalExecutionOutcome } from "near-api-js/lib/providers";
import { SCHEMA } from "near-api-js/lib/transaction";

interface FastAuthState {
    keyPair: KeyPair;
    accountId: string;
}

const STORAGE_KEY = "FAST_AUTH_WALLET_STATE";

interface FastAuthSignInParams extends SignInParams {
    idToken: string;
}

const FastAuthWallet: WalletModuleFactory = async (walletOptions) => {
    const { options } = walletOptions;
    console.log("options", options);

    const wallet: WalletBehaviourFactory<Wallet> = async ({
        options: _options,
        store: _store,
        provider,
        emitter,
        logger: _logger,
        storage,
    }) => {
        let state: FastAuthState | null = null;

        const loadState = async () => {
            const storedState = await storage.getItem<FastAuthState>(
                STORAGE_KEY
            );
            if (storedState) {
                state = storedState;
            }
        };

        const saveState = async () => {
            if (state) {
                await storage.setItem(STORAGE_KEY, state);
            }
        };

        const clearState = async () => {
            await storage.removeItem(STORAGE_KEY);
            state = null;
        };

        await loadState();

        const mapAction = (action): transactions.Action => {
            switch (action.type) {
                case "FunctionCall":
                    return transactions.functionCall(
                        action.params.methodName,
                        action.params.args,
                        BigInt(action.params.gas),
                        BigInt(action.params.deposit)
                    );
                // Handle other action types as needed
                default:
                    throw new Error(`Unsupported action type: ${action.type}`);
            }
        };

        return {
            /** Sign In */
            async signIn(params: FastAuthSignInParams) {
                const { idToken, contractId, methodNames } = params;

                // Generate a new keypair
                const keyPair = KeyPair.fromRandom("ed25519");
                const publicKey = keyPair.getPublicKey().toString();

                // Use the idToken and publicKey to authenticate with your backend
                const response = await fetch(
                    "https://fastauth-worker-dev.keypom.workers.dev/add-session-key",
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ idToken, publicKey }),
                    }
                );
                const result = await response.json();
                if (!response.ok || !result.success) {
                    throw new Error(
                        result.error || "Failed to sign in with FastAuth"
                    );
                }

                const accountId = result.accountId || "benjiman.testnet"; // Replace with actual accountId

                state = {
                    accountId,
                    keyPair,
                };

                await saveState();

                // Emit the signedIn event
                const accounts: Array<Account> = [{ accountId }];
                emitter.emit("signedIn", {
                    contractId: contractId,
                    methodNames: methodNames || [],
                    accounts,
                });

                return accounts;
            },

            /** Sign Out */
            async signOut() {
                await clearState();

                // Revoke the OAuth token
                googleLogout();

                // Emit the signedOut event
                emitter.emit("signedOut", null);
            },

            /** Get Accounts */
            async getAccounts() {
                if (state) {
                    return [{ accountId: state.accountId }];
                }
                return [];
            },

            /** signAndSendTransaction */
            async signAndSendTransaction(
                params: any
            ): Promise<FinalExecutionOutcome> {
                if (!state) {
                    throw new Error("Wallet not signed in");
                }

                const { accountId } = state;
                const signerId = params.signerId || accountId;
                const receiverId =
                    params.receiverId || params.signerId || accountId;

                const actions = params.actions.map((action) =>
                    mapAction(action)
                );

                const publicKey = state.keyPair.getPublicKey();
                const accessKey = await provider.viewAccessKey({
                    accountId: signerId,
                    publicKey: publicKey.toString(),
                });

                const block = await provider.block({ finality: "final" });

                const nonce = accessKey.nonce + BigInt(1);

                const transaction = transactions.createTransaction(
                    signerId,
                    publicKey,
                    receiverId,
                    nonce,
                    actions,
                    utils.serialize.base_decode(block.header.hash)
                );

                const serializedTx = utils.serialize.serialize(
                    SCHEMA.SignedTransaction,
                    transaction
                );

                const signature = state.keyPair.sign(serializedTx);

                const signedTransaction = new transactions.SignedTransaction({
                    transaction,
                    signature: new transactions.Signature({
                        keyType: transaction.publicKey.keyType,
                        data: signature.signature,
                    }),
                });

                // Send the transaction
                return await provider.sendTransaction(signedTransaction);
            },

            /** signAndSendTransactions */
            async signAndSendTransactions(
                params: any
            ): Promise<Array<FinalExecutionOutcome>> {
                const results: Array<FinalExecutionOutcome> = [];
                for (const tx of params.transactions) {
                    const result = await this.signAndSendTransaction({
                        ...tx,
                        signerId: tx.signerId || state?.accountId,
                    });
                    results.push(result);
                }
                return results;
            },

            /** verifyOwner */
            async verifyOwner(
                params: VerifyOwnerParams
            ): Promise<VerifiedOwner | void> {
                throw new Error("Method not implemented.");
            },
        };
    };

    return {
        id: "fastauth-wallet",
        type: "instant-link",
        metadata: {
            name: "FastAuth Wallet",
            description: null,
            iconUrl: "https://your-icon-url/fastauth-icon.png",
            downloadUrl: null,
            deprecated: false,
            available: true,
        },
        init: wallet,
    };
};

export default FastAuthWallet;


### lib/styles.css ###
/* lib/styles.css */

/* Theme Variables */
:root {
    --fastauth-backdrop-bg: rgba(0, 0, 0, 0.5);
    --fastauth-content-bg: #ffffff;
    --fastauth-heading-color: #222222;
    --fastauth-text-color: #676767;
    --fastauth-close-button-bg: #ededed;
    --fastauth-close-button-icon-color: #9f9f9f;
    --fastauth-button-bg: #5f8afa;
    --fastauth-button-bg-hover: #5aa6ff;
    --fastauth-button-text-color: #ffffff;
}

/* Dark Theme Overrides */
.dark-theme {
    --fastauth-backdrop-bg: rgba(0, 0, 0, 0.8);
    --fastauth-content-bg: #232323;
    --fastauth-heading-color: #ffffff;
    --fastauth-text-color: #c1c1c1;
    --fastauth-close-button-bg: #313030;
    --fastauth-close-button-icon-color: #c1c1c1;
}

/* Modal Wrapper */
.fastauth-modal-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--fastauth-backdrop-bg);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

/* Modal Content */
.fastauth-modal {
    background-color: var(--fastauth-content-bg);
    border-radius: 16px;
    width: 100%;
    max-width: 500px;
    margin: 20px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.fastauth-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px;
}

.fastauth-modal-header h3 {
    margin: 0;
    font-size: 18px;
    color: var(--fastauth-heading-color);
}

.fastauth-close-button {
    background-color: var(--fastauth-close-button-bg);
    border: none;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
}

.fastauth-close-button svg {
    fill: var(--fastauth-close-button-icon-color);
}

.fastauth-modal-body {
    padding: 16px;
}

.fastauth-content {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.fastauth-content .google-login-button {
    width: 100%;
    max-width: 300px;
}

.fastauth-content .wallet-signin-button {
    margin-top: 20px;
    padding: 10px 24px;
    background-color: var(--fastauth-button-bg);
    border: none;
    border-radius: 4px;
    color: var(--fastauth-button-text-color);
    font-size: 14px;
    cursor: pointer;
}

.fastauth-content .wallet-signin-button:hover {
    background-color: var(--fastauth-button-bg-hover);
}


### lib/Storage.ts ###
// lib/Storage.ts

class FastAuthStorage {
    private prefix: string;

    constructor(prefix = "FAST_AUTH_WALLET:") {
        this.prefix = prefix;
    }

    setItem(key: string, value: string) {
        localStorage.setItem(this.prefix + key, value);
    }

    getItem(key: string): string | null {
        return localStorage.getItem(this.prefix + key);
    }

    removeItem(key: string) {
        localStorage.removeItem(this.prefix + key);
    }

    clear() {
        // Remove all items with the prefix
        Object.keys(localStorage).forEach((key) => {
            if (key.startsWith(this.prefix)) {
                localStorage.removeItem(key);
            }
        });
    }
}

export default new FastAuthStorage();


### lib/setupWalletSelector.ts ###
// setupWalletSelector.ts

import { setupWalletSelector as baseSetupWalletSelector } from "@near-wallet-selector/core";

import FastAuthWallet from "./FastAuthWallet";

export const setupWalletSelector = async (params) => {
    const { modules = [] } = params;

    const selector = await baseSetupWalletSelector({
        ...params,
        modules: [FastAuthWallet, ...modules],
    });

    return selector;
};


### lib/FastAuthModal.tsx ###
import React from "react";
import { WalletSelector } from "@near-wallet-selector/core";
import { GoogleLogin, CredentialResponse } from "@react-oauth/google";
import { CloseIcon } from "./icons/CloseIcon"; // You'll need to add this icon or replace it with your own

interface FastAuthModalProps {
    selector: WalletSelector;
    options: any;
    isVisible: boolean;
    onClose: () => void;
    walletSelectorModal: any; // Accept the walletSelectorModal prop
}

const FastAuthModal: React.FC<FastAuthModalProps> = ({
    selector,
    options,
    isVisible,
    onClose,
    walletSelectorModal,
}) => {
    if (!isVisible) return null;

    const handleGoogleSuccess = async (
        credentialResponse: CredentialResponse
    ) => {
        const idToken = credentialResponse.credential;

        try {
            const wallet = await selector.wallet("fastauth-wallet");
            await wallet.signIn({
                idToken,
                contractId: options.contractId,
                methodNames: options.methodNames,
            });
            onClose();
        } catch (error) {
            console.error("Error during FastAuth sign-in:", error);
        }
    };

    const handleGoogleError = () => {
        console.error("Google Sign-In failed");
    };

    const handleWalletSignIn = () => {
        if (walletSelectorModal) {
            onClose(); // Close the FastAuth modal before opening the wallet selector modal
            walletSelectorModal.show();
        }
    };

    return (
        <div
            className={`fastauth-modal-wrapper ${
                options.theme === "dark" ? "dark-theme" : ""
            }`}
        >
            <div className="fastauth-modal">
                <div className="fastauth-modal-header">
                    <h3>Sign in with Google</h3>
                    <button className="fastauth-close-button" onClick={onClose}>
                        <CloseIcon />
                    </button>
                </div>
                <div className="fastauth-modal-body">
                    <div className="fastauth-content">
                        <div className="google-login-button">
                            <GoogleLogin
                                onSuccess={handleGoogleSuccess}
                                onError={handleGoogleError}
                                theme="outline"
                                size="large"
                                text="signin_with"
                                shape="rectangular"
                                logo_alignment="left"
                                width="300"
                            />
                        </div>
                        <button
                            className="wallet-signin-button"
                            onClick={handleWalletSignIn}
                        >
                            Sign in with a Wallet
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FastAuthModal;


### lib/modal.tsx ###
import React from "react";
import { WalletSelector } from "@near-wallet-selector/core";
import type { Root } from "react-dom/client";
import { createRoot } from "react-dom/client";
import FastAuthModal from "./FastAuthModal";
import FastAuthProvider from "./FastAuthProvider"; // Import the provider
import { setupModal as setupWalletSelectorModal } from "@near-wallet-selector/modal-ui"; // Import setupModal

interface MyCustomModal {
    show: () => void;
    hide: () => void;
}

let root: Root | null = null;

export function setupModal(
    selector: WalletSelector,
    options: any
): MyCustomModal {
    let isVisible = false;
    let walletSelectorModal = null;

    const show = () => {
        isVisible = true;
        renderModal();
    };

    const hide = () => {
        isVisible = false;
        renderModal();
    };

    const renderModal = () => {
        const container =
            document.getElementById("fastauth-wallet-selector-modal") ||
            document.createElement("div");
        container.id = "fastauth-wallet-selector-modal";
        document.body.appendChild(container);

        if (!root) {
            root = createRoot(container);
        }

        if (!walletSelectorModal) {
            walletSelectorModal = setupWalletSelectorModal(selector, {
                contractId: options.contractId,
                methodNames: options.methodNames,
                theme: options.theme,
                description: options.description,
                // Include other options as needed
            });
        }

        root.render(
            <FastAuthProvider clientId={options.clientId}>
                <FastAuthModal
                    selector={selector}
                    options={options}
                    isVisible={isVisible}
                    onClose={hide}
                    walletSelectorModal={walletSelectorModal}
                />
            </FastAuthProvider>
        );
    };

    return {
        show,
        hide,
    };
}


### lib/FastAuthProvider.tsx ###
// src/FastAuthProvider.tsx
import React from "react";
import { GoogleOAuthProvider } from "@react-oauth/google";

interface FastAuthProviderProps {
    children: React.ReactNode;
    clientId: string;
}

const FastAuthProvider: React.FC<FastAuthProviderProps> = ({
    children,
    clientId,
}) => {
    return (
        <GoogleOAuthProvider clientId={clientId}>
            {children}
        </GoogleOAuthProvider>
    );
};

export default FastAuthProvider;


### lib/icons/CloseIcon.tsx ###
// lib/icons/CloseIcon.tsx
import React from "react";

export const CloseIcon: React.FC = () => (
    <svg
        width="14"
        height="14"
        viewBox="0 0 14 14"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
    >
        <path
            d="M13 1L1 13"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
        />
        <path
            d="M1 1L13 13"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
        />
    </svg>
);

export default CloseIcon;


